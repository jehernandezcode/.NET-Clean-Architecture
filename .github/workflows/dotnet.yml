name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build application
        run: dotnet build --configuration Release --no-restore

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests
        run: dotnet test --collect:"XPlat Code Coverage"

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
    
      - name: Find Coverage File
        id: coverage-file
        run: |
         FILE_PATH=$(find ${{ github.workspace }}/test/UnitTests/Application.Customers.UnitTests/TestResults -type f -name 'coverage.cobertura.xml' | grep -E '.*/[a-f0-9\-]+/coverage\.cobertura\.xml$')
         echo "FILE_PATH=$FILE_PATH" >> $GITHUB_ENV

      - name: Generate OpenCover Report
        run: |
         reportgenerator "-reports:${{ env.FILE_PATH }}" "-targetdir:${{ github.workspace }}/coverage-report" -reporttypes:OpenCover

        

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet sonarscanner begin \
            /k:"jehernandezcode_.NET-Clean-Architecture" \
            /o:"jhonnhernandezcode" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.coverage.opencover.reportPaths=${{ github.workspace }}/coverage-report/opencover.xml
          dotnet build --configuration Release
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
